{{ 'cf-footer.css' | asset_url | stylesheet_tag }}

<div class="cf-footer" data-js-element="animated-section">
  <div class="cf-footer_spacing padding-vertical padding-large">
    <div class="cf-footer_content container">
      <div class="cf-footer_text display-flex padding-vertical padding-small flex-direction-column">
        <small
          data-js-el="footer-title"
          class="cf-footer_overline padding-bottom padding-small uppercase text-color-azul-verdoso-100 text-weight-medium"
        >
          Shipping details
        </small>
        <h2 class="cf-footer_title">Enter your address</h2>
      </div>
      <form data-js-element="cf-form" class="cf-footer_form padding-bottom padding-xlarge" autocomplete="on">
        <div data-js-element="cf-form-inputs" class="cf-footer_form-inputs"></div>

        <div class="sticky-banner display-flex justify-content-between align-items-center background-color-white">
          <div class="sticky-banner_header display-flex gap-2">
            <h6 data-js-element="sticky-main-gifts"></h6>
            <h6 data-js-element="sticky-custom-gifts"></h6>
          </div>
          <button data-js-element="submit-form-button" type="submit" class="button">
            <span>Submit your selection</span>
          </button>
        </div>
      </form>
    </div>
  </div>
</div>
{% comment %} build modal {% endcomment %}
<div id="modal-thank-you" class="modal pos-rel">
  <div class="modal-container">
    {% render 'campaign-form__icon-close' %}
    <!-- Modal Content -->
    <div class="product-modal_content">
      <h2 class="margin-bottom margin-small">Your gifts are on the way</h2>
      <p data-js-element="shippingDetails" class="shipping-details margin-bottom margin-large">Expected delivery in 2 weeks</p>
      <div data-js-element="thank-you-modal-products" class="display-flex gap-1 justify-content-between">
        <div class="modal-loading pos-dead-center">
          <div class="modal-loading-container text-align-center">
            <div class="loading-spinner"></div>
            <p class="text-size-tiny margin-top margin-small">Loading product details...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  {% comment %} media max-width 990 {% endcomment %}

  .cf-footer_content {
    max-width: 600px;
    margin: 0 auto;
  }

  @media screen and (max-width: 990px) {
    .cf-footer_content {
      margin-bottom: 5rem;
    }
  }

  #modal-thank-you .modal-container {
    min-height: 300px;
  }

  #modal-thank-you .cf-product-card {
    width: calc(33% - 0.7rem);
  }

  {% comment %} hide add to bag details for already selected gift in modal {% endcomment %}
  #modal-thank-you .cf-product-card_details {
    display: none;
  }

  #modal-thank-you.is-active {
    opacity: 1;
    visibility: visible;
    transform: translate(0);
    pointer-events: auto;
    display: flex;
  }

  #modal-thank-you h2 {
    opacity: 1;
    transform: translate(0);
  }

  #modal-thank-you {
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease-in-out;
    transform: translateY(50px);
    pointer-events: none;
  }

</style>

<script type="module">
  import wretch from 'https://cdn.skypack.dev/wretch/dist/bundle/wretch.all.min.mjs'

  const ifAtleastOneMainGiftIsSelected = (state) => {
    const submitFormButtonEl = document.querySelector('[data-js-element="submit-form-button"]');

    if (state) {
      submitFormButtonEl.removeAttribute('disabled');
    } else {
      submitFormButtonEl.setAttribute('disabled', true);
    }
  }

  window.campaignForm.buildThankYouModal = (props) => {
    const { products, shippingDetails } = props;
    const giftState = window.campaignForm.state;


    const elements = {
      shippingDetailsElement: document.querySelector('[data-js-element="shippingDetails"]'),
      modalThankYouEl: document.querySelector('#modal-thank-you'),
      thankYouModalProductsEl: document.querySelector('[data-js-element="thank-you-modal-products"]'),
      modalCloseEl: document.querySelector("[data-js-element='cf-icon-close']"),
    }

    {% comment %} if you click modalThankYouEl and target is not modal-container or any of its children, close modal {% endcomment %}
    elements.modalThankYouEl.addEventListener('click', (e) => {
      if (e.target === elements.modalThankYouEl) {
        elements.modalThankYouEl.classList.remove('is-active');
      }
    });

    {% comment %} close modal when clicking close icon {% endcomment %}

    let mainGifts = [];
    let customGifts = [];

    if (window.campaignForm.state['Main Gift']) {
      mainGifts = products.filter(p => window.campaignForm.state['Main Gift'].includes(p.product.title))
    }

    if (window.campaignForm.state['Custom Swag']) {
      customGifts = products.filter(p => window.campaignForm.state['Custom Swag'].includes(p.product.title))
    }

    {% comment %} add selected products to modal {% endcomment %}
    elements.thankYouModalProductsEl.innerHTML = `
      ${mainGifts.map(p => window.cfProductCard(p)).join('')}
      ${customGifts.map(p => window.cfProductCard(p)).join('')}
    `;

    elements.shippingDetailsElement.innerHTML = shippingDetails;

    const productCards = document.querySelectorAll('#modal-thank-you .cf-product-card');
    {% comment %} add is-selected to all product cards {% endcomment %}
    productCards.forEach((productCard) => {
      productCard.classList.add('is-selected');
    });


    {% comment %} reveal modal {% endcomment %}
    elements.modalThankYouEl.classList.add('is-active');
  }
  
  window.campaignForm.buildFooter = (props) => {
    const { formStructure, formButtonText, products, shippingDetails } = props;

    const elements = {
      cfFormEl: document.querySelector('[data-js-element="cf-form"]'),
      cfFormInputsEl: document.querySelector('[data-js-element="cf-form-inputs"]'),
      submitFormButtonEl: document.querySelector('[data-js-element="submit-form-button"] span'),
    }

    // will disable submit button if no main gift is selected
    ifAtleastOneMainGiftIsSelected();

    elements.submitFormButtonEl.innerText = formButtonText;

    elements.cfFormInputsEl.innerHTML = formStructure
      .map((input) => {
        const { label, type, options } = input;
        const inputId = label.toLowerCase().replace(' ', '-');
        const inputName = label.toLowerCase().replace(' ', '_');
        console.log(label)
        {% comment %} format label with 1 space between each word {% endcomment %}
        const formattedLabel = label.replace(/([A-Z])/g, ' $1').trim();

        return `
          <div class="field-group margin-top margin-medium">
              <label class="text-size-tiny uppercase" for="ContactForm-name">${formattedLabel}</label>
            
              <input
                id="${inputId}"
                type="${type}"
                name="${inputName}"
                class="field_input"
                value=""
                aria-required="${input.required}"
                autocorrect="off"
                autocapitalize="off"
                placeholder="${formattedLabel}"
                ${input.required ? 'required' : ''}
              >
            </div>
        `;
      })
      .join('');

    elements.cfFormEl.addEventListener('submit', async (e) => {
      let loading = true;

      {% comment %} const backendURL = 'http://localhost:8080' {% endcomment %}
      const backendURL = 'https://foodiepagesbackend.onrender.com'
      const urlParams = new URLSearchParams(window.location.search);
      const campaignNameParam = urlParams.get('campaign');
      const clientIdParam = urlParams.get('client');

      e.preventDefault();
      const formData = new FormData(e.target);
      const formState = Object.fromEntries(formData.entries());
      
      const giftState = window.campaignForm.state;

      const pageData = await wretch(
        `${backendURL}/api/airtable-create-campaign-entry?campaignName=${campaignNameParam}&customerId=${clientIdParam}`
      ) // Base url
        // Authorization header
        .post({
          formState,
          giftState,
        }) // Post data
        .badRequest((err) => {
          throw err;
        }) // Handle 400 errors
        .unauthorized((err) => {
          throw err;
        }) // Handle 401 errors
        .notFound((err) => {
          throw err;
        }) // Handle 404 errors
        .internalError((err) => {
          throw err;
        }) // Handle 500 errors
        .res((res) => res.json()); // Parse response as JSON
      
      {% comment %} make a backend call to /airtable-create-campaign-entry {% endcomment %}

      if (pageData.message === 'Success') {
        console.log('gets here')
        {% comment %} pageData.data.body.fields {% endcomment %}
        window.campaignForm.buildThankYouModal({ products, shippingDetails });
        let loading = false;
      }


    });

    document.addEventListener('gift-state-changed', (e) => {
      const { detail } = e;
      const { state } = detail;

      {% comment %} get data-js-element="sticky-main-gifts" {% endcomment %}
      const stickyMainGiftsEl = document.querySelector('[data-js-element="sticky-main-gifts"]');
      const stickyCustomGiftsEl = document.querySelector('[data-js-element="sticky-custom-gifts"]');
      const mainGiftProductCards = [...document.querySelectorAll('[data-js-element="products-slider-main"] [data-js-element="cf-product-card"]')];
      
      const mainGiftsState = state['Main Gift'] && state['Main Gift'].split(',', 1);
      {% comment %} refactor line above to only split on the first found comma (,) {% endcomment %}


      const customGiftsState = state['Custom Swag'] && state['Custom Swag'].split(',', 1);

      {% comment %} get number of selected main gift product cards {% endcomment %}
      const numberOfSelectedMainGifts = mainGiftProductCards.filter(card => card.classList.contains('is-selected')).length;

      if (numberOfSelectedMainGifts === window.campaignForm.numberOfSelectableGifts) {
        {% comment %} for each unselected card add opacity 0.5, pointer-events: none, and cursor: not-allowed (inline styles) {% endcomment %}
        mainGiftProductCards.forEach(card => {
          if (!card.classList.contains('is-selected')) {
            {% comment %} add is-disabled class {% endcomment %}
            card.classList.add('is-disabled');
          }
        })
      } else {
        {% comment %} for each unselected card remove opacity 0.5, pointer-events: none, and cursor: not-allowed (inline styles) {% endcomment %}
        mainGiftProductCards.forEach(card => {
          if (!card.classList.contains('is-selected')) {
            {% comment %} remove is-disabled class {% endcomment %}
            card.classList.remove('is-disabled');
          }
        })
      }
      
      if (mainGiftsState) {
        stickyMainGiftsEl.innerText = mainGiftsState.map(gift => {
          const productTitle = gift.split('|')[0].replace('Product Title:', '');
          const variantTitle = gift.split('|')[1].replace('Variant Title:', '');
        
          return !variantTitle.includes('Default Title') ? `${productTitle} | ${variantTitle}` : productTitle
        }).join(', ')
      } else {
        stickyMainGiftsEl.innerText = ''
      }

      if (customGiftsState) {
        stickyCustomGiftsEl.innerText = customGiftsState.map(gift => {
          const productTitle = gift.split('|')[0].replace('Product Title:', '');
          const variantTitle = gift.split('|')[1].replace('Variant Title:', '');

          return !variantTitle.includes('Default Title') ? `${productTitle} | ${variantTitle}` : productTitle
        }).join(', ')
      } else {
        stickyCustomGiftsEl.innerText = ''
      }

      ifAtleastOneMainGiftIsSelected(mainGiftsState)
    })
  };

</script>
