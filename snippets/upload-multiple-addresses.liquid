<form data-js-element="submit-multiple-address">
  <div id="csvForm" class="margin-bottom margin-medium"></div>
  <div data-js-element="csv-buttons" class="is-hidden display-flex justify-content-between margin-bottom margin-medium">
    <div>
      <button data-js-element="export-csv" class="button">
        <span>Export CSV</span>
      </button>
      <button data-js-element="clear-csv" class="button secondary">
        <span>Clear CSV</span>
      </button>
    </div>
    <button class="button">
      <span>
        <div class="display-flex align-items-center gap-0-5">
          <div>Submit</div>
          <div data-js-element="submit-multiple-addresses-loading" class="is-loading display-flex is-hidden">
            <div class="loading-spinner"></div>
          </div>
        </div>
      </span>
    </button>
  </div>
</form>

<div
  data-js-element="file-upload_container"
  class="file-upload_container multiple display-flex justify-content-between padding-medium margin-bottom margin-small align-items-center is-disabled"
>
  <p>Upload your CSV file now</p>
  <button class="button secondary"><span>Upload</span></button>
</div>

<input
  style="display: none;"
  type="file"
  id="csvFile"
  class="file-upload_input"
  accept=".csv"
  data-js-element="file-upload_input"
>

<div id="inventory-insufficient" style="display: none">
  <div class="popup-overlay" data-js-element="close-popup"></div>
  <div class="popup-content">
    <h3 class="popup-title margin-bottom margin-small">Inventory Insufficient</h3>
    <p class="popup-body margin-bottom margin-small">
      You are trying to add too many products. Unfortunately, you do not have enough inventory available. Make sure to
      order new products, select a product with enough inventory or reduce the amount of rows in your uploaded CSV.
    </p>

    <div class="popup-ctas display-flex gap-1">
      <button data-js-element="contact" class="button">
        <span>Contact Account Manager</span>
      </button>
      <button data-js-element="new-products" class="button secondary">
        <span>Order New Product</span>
      </button>
    </div>

    <button class="popup-close-button" data-js-element="close-popup">
      <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect x="0.5" y="0.5" width="47" height="47" rx="23.5" fill="white"/>
        <path d="M30.8348 30.3634L30.3633 30.8348C30.103 31.0951 29.6809 31.0951 29.4205 30.8348L23.9994 25.4136L18.5782 30.8347C18.3179 31.0951 17.8958 31.0951 17.6354 30.8347L17.164 30.3633C16.9037 30.103 16.9037 29.6809 17.164 29.4205L22.5852 23.9994L17.164 18.5782C16.9037 18.3179 16.9037 17.8958 17.164 17.6354L17.6354 17.164C17.8958 16.9037 18.3179 16.9037 18.5782 17.164L23.9994 22.5852L29.4205 17.164C29.6809 16.9037 30.103 16.9037 30.3633 17.164L30.8348 17.6354C31.0951 17.8958 31.0951 18.3179 30.8348 18.5782L25.4136 23.9994L30.8348 29.4205C31.0951 29.6809 31.0951 30.103 30.8348 30.3634Z" fill="black"/>
        <rect x="0.5" y="0.5" width="47" height="47" rx="23.5" stroke="#E0E0E0"/>
      </svg>
    </button>
  </div>
</div>

<style>
  #csvForm {
    overflow: auto;
  }

  #csvForm table {
  }

  #csvForm table th {
    text-align: left;
  }

  .account #csvForm table td:first-of-type {
    padding: 0;
    padding-left: 1rem;
  }

  .account #csvForm table input {
  }

  input.has-error {
    border-color: red;
  }

  {% comment %} max-width media query 767 {% endcomment %}
  @media screen and (max-width: 767px) {
    .account #csvForm table tr {
      display: table-row;
    }

    .account #csvForm table td {
      display: table-cell;
    }

    .account #csvForm table td:first-of-type {
      padding-left: 0;
      text-align: left;
    }

    .account #csvForm table td::before {
      display: none;
    }

    #csvForm table th {
      text-align: left;
    }

    #csvForm table th {
      display: table-cell;
    }

    [data-js-element="csv-buttons"] {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }
  }
</style>

<script type="module">
  const initMultipleAddressForm = () => {
    const elements = {
      fileInputTrigger: document.querySelector('[data-js-element="file-upload_container"]'),
      fileInput: document.querySelector('[data-js-element="file-upload_input"]'),
      form: document.querySelector('[data-js-element="submit-multiple-address"]'),
      insufficientInventoryModal: document.querySelector('#inventory-insufficient'),
      exportCsvButton: document.querySelector('[data-js-element="export-csv"]'),
      clearCsvButton: document.querySelector('[data-js-element="clear-csv"]'),
      csvButtons: document.querySelector('[data-js-element="csv-buttons"]'),
      csvForm: document.querySelector('#csvForm'),
      submitMultipleAddressesLoading: document.querySelector('[data-js-element="submit-multiple-addresses-loading"]'),
    };

    let uploadedCSV = null;

    const tableToJson = (table) => {
      const headers = Array.from(table.querySelectorAll('th'))
        .slice(1)
        .map((th) => th.textContent);
      const rows = Array.from(table.querySelectorAll('tr:not(:first-child)'));
      const json = rows.map((row) => {
        const cells = Array.from(row.querySelectorAll('td')).slice(1);
        const rowData = cells.reduce((acc, cell, index) => {
          acc[headers[index]] = cell.querySelector('input') ? cell.querySelector('input').value : cell.textContent;
          return acc;
        }, {});

        return {
          firstname: rowData['Recipient First Name'],
          lastname: rowData['Recipient Last Name'],
          email: rowData['To Email'],
          phonenumber: rowData['Phone Number'],
          addressline1: rowData['Address Line 1'],
          addressline2: rowData['Address Line 2'],
          city: rowData['City'],
          province: rowData['Province Code'],
          country: rowData['Country Code'],
          'postalcode/zip': rowData['Zip/Postal'],
          gift_message: rowData['Gift Message'],
          companyName: rowData['Company Name'],
        };
      });

      return json;
    };

    const handlers = {
      onClearCsvClick: (event) => {
        event.preventDefault();
        {% comment %} get data-js-element="file-upload_input", if it has a value, clear it {% endcomment %}
        if (elements.fileInput.value) {
          elements.fileInput.value = '';
        }

        clearTableContent();
      },
      onFormKeyDown: (event) => {
        if (event.key === 'Enter' || event.keyCode === 13) {
          event.preventDefault();
          elements.form.dispatchEvent(new Event('submit'));
        }
      },
      onSubmitForm: (event) => {
        event.preventDefault();

        const isFormValid = elements.form.reportValidity();
        const errorRows = {};

        if (!isFormValid) {
          const rows = elements.form.querySelectorAll('tr');
          rows.forEach((row, rowIndex) => {
            if (rowIndex > 0) {
              // Skip the header row
              const inputs = row.querySelectorAll('input');
              const errorInputs = [];
              inputs.forEach((input, inputIndex) => {
                if (!input.validity.valid) {
                  errorInputs.push({
                    inputIndex: inputIndex - 1, // -1 to account for the index count cell
                    errorMessage: input.validationMessage,
                  });
                }
              });
              if (errorInputs.length > 0) {
                errorRows[rowIndex] = errorInputs;
              }
            }
          });
          console.log('Form not submitted due to validation errors:', errorRows);
        } else {
          event.preventDefault();
          const jsonData = tableToJson(document.querySelector('#csvForm table'));

          submitAddressesToAirtable(jsonData);
        }
      },
      onFileInputTriggerClick: (event) => {
        event.preventDefault();
        elements.fileInput.click();
      },
      onFileInputChange: (event) => {
        elements.csvButtons.classList.remove('is-hidden');

        const file = event.target.files[0];

        if (file.type === 'text/csv') {
          const reader = new FileReader();

          reader.onload = function (e) {
            const csv = e.target.result;
            const form = csvToTable(csv);
            const csvFormContainer = document.getElementById('csvForm');

            csvFormContainer.style.display = 'block';

            if (csvFormContainer.firstChild) {
              csvFormContainer.removeChild(csvFormContainer.firstChild);
            }

            csvFormContainer.appendChild(form);

            const numberOfRows = document.getElementById('csvForm').querySelectorAll('tr').length - 1; // Subtract 1 to exclude the header row

            const lowestInventory = getLowestInventory();

            if (lowestInventory < numberOfRows) {
              elements.insufficientInventoryModal.style.display = 'flex';
              clearTableContent(event.target.value);
            }
          };

          reader.readAsText(file);
        } else {
          alert('Please upload a CSV file.');
        }
      },
      exportTableToCsv: (event) => {
        event.preventDefault();

        const table = document.querySelector('#csvForm table');
        const rows = table.querySelectorAll('tr');
        const csv = [];

        rows.forEach((row) => {
          const rowData = [];
          const cells = row.querySelectorAll('th, td');

          cells.forEach((cell, cellIndex) => {
            // Ignore the first cell, which contains the row index
            if (cellIndex > 0) {
              if (cell.querySelector('input')) {
                rowData.push(cell.querySelector('input').value);
              } else {
                rowData.push(cell.textContent);
              }
            }
          });

          csv.push(rowData.join(','));
        });

        const csvContent = csv.join('\n');
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'exported-table.csv';
        link.style.display = 'none';

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      },
    };

    const clearTableContent = (value) => {
      if (value) {
        value = null;
      }

      setTimeout(function () {
        elements.csvForm.style.display = 'none';
        elements.csvButtons.classList.add('is-hidden');
      }, 1000);
    };

    const csvToTable = (csv) => {
      if (elements.csvForm) {
        elements.csvForm.style.display = 'block';
      }

      const createEditableCell = (value, isRequired) => {
        const cell = document.createElement('td');
        const input = document.createElement('input');
        input.type = 'text';
        input.value = value;
        input.classList.add('field_input');
        input.style.minWidth = '220px';
        if (isRequired) {
          input.required = true;
          if (value.trim() === '') {
            input.classList.add('has-error');
          }
          input.addEventListener('input', function () {
            if (this.value.trim() !== '') {
              this.classList.remove('has-error');
            } else {
              this.classList.add('has-error');
            }
          });
        }
        cell.appendChild(input);
        return cell;
      };

      const lines = csv.split('\n');
      const div = document.createElement('div');

      div.style.overflowX = 'auto';
      div.style.whiteSpace = 'nowrap';

      const table = document.createElement('table');
      div.appendChild(table);

      const header = document.createElement('tr');

      const columnTitles = [
        '',
        'Recipient First Name',
        'Recipient Last Name',
        'To Email',
        'Phone Number', // Added the Phone Number field
        'Address Line 1',
        'Address Line 2',
        'City',
        'Province Code',
        'Country Code',
        'Zip/Postal',
        'Gift Message',
        'Company Name',
      ];

      columnTitles.forEach((title) => {
        const cell = document.createElement('th');
        cell.textContent = title;
        header.appendChild(cell);
      });

      table.appendChild(header);

      lines.slice(1).forEach((line, index) => {
        const values = line.split(',');
        if (values.length >= 10) { // Updated the minimum required number of columns
          const row = document.createElement('tr');

          // Add index count + 1 at the beginning of the row
          const rowIndexCell = document.createElement('td');
          rowIndexCell.textContent = index + 1;
          row.appendChild(rowIndexCell);

          row.appendChild(createEditableCell(values[0], true));
          row.appendChild(createEditableCell(values[1], true));
          row.appendChild(createEditableCell(values[2], false));
          row.appendChild(createEditableCell(values[3], false));
          row.appendChild(createEditableCell(values[4], true)); // Updated to include the Phone Number field
          row.appendChild(createEditableCell(values[5] || '', false));
          row.appendChild(createEditableCell(values[6], true));
          row.appendChild(createEditableCell(values[7], true));
          row.appendChild(createEditableCell(values[8], true));
          row.appendChild(createEditableCell(values[9], true));
          row.appendChild(createEditableCell(values[10] || '', false));
          row.appendChild(createEditableCell(values[11] || '', false));
          table.appendChild(row);
        }
      });

      return div;
    };

    const getLowestInventory = () => {
      const activeCampaigns = [...document.querySelectorAll('.corporate-campaigns-products')];
      const activeCampaignsContainer = activeCampaigns.find((campaign) => !campaign.classList.contains('is-disabled'));

      console.log(activeCampaigns)

      const state = window.campaignForm.state;
      const mainGifts = state['Main Gift'];
      const customGifts = state['Custom Swag'];
      const productInfoString = [mainGifts, customGifts].filter(Boolean).join(', ');

      const productIdMatches = productInfoString.match(/Product Id: (\d+)/g);
      const variantSkuMatches = productInfoString.match(/Variant Sku: ([\w-]+)/g);

      const selectedProducts = productIdMatches.map((match, index) => {
        const productId = match.split(':').pop().trim();

        const variantSkuMatch = variantSkuMatches && variantSkuMatches[index];
        const variantSku = variantSkuMatch ? variantSkuMatch.split(':').pop().trim() : null;

        return {
          productId,
          variantSku,
        };
      });

      console.log(activeCampaignsContainer)


      // Filter out items with matching data-product-id
      const productCards = activeCampaignsContainer.querySelectorAll('[data-js-element="cf-product-card"]');

      {% comment %} console.log(productCards); {% endcomment %}

      const filteredProductCards = Array.from(productCards).filter((card) => {
        const productId = card.getAttribute('data-product-id');
        return selectedProducts.find(p => p.productId.includes(productId));
      });

      // Find the lowest inventory value for each item found
      let lowestInventory = Infinity;

      filteredProductCards.forEach((card) => {
        const productId = card.getAttribute('data-product-id');
        const inventoryElement = card.querySelector('[data-inventory]');

        // find the selected product with productId
        const selectedProduct = selectedProducts.find((product) => product.productId === productId);

        let inventoryValue = +inventoryElement.dataset.inventory;

        // find all the span elements inside the inventoryElement
        const inventorySpans = Array.from(inventoryElement.querySelectorAll('span'));
        const inventorySpan = inventorySpans.find((span) => span.textContent.includes(selectedProduct.variantSku));

        if (inventorySpan) {
          const inventoryText = inventorySpan.textContent;

          const text = inventoryText && inventoryText.split('Inventory:').pop().trim();
          const inventoryValue = parseInt(text, 10);

          if (inventoryValue < lowestInventory) {
            lowestInventory = inventoryValue;
          }
        } else {
          if (inventoryValue < lowestInventory) {
            lowestInventory = inventoryValue;
          }
        }
      });


      return lowestInventory;
    };

      {% comment %} document.addEventListener('gift-state-changed', (e) => {
        setTimeout(() => {
          const inventory = getLowestInventory();
          console.log(inventory)
        }, 1000)
      }); {% endcomment %}

    const submitAddressesToAirtable = async (jsonData) => {
      elements.submitMultipleAddressesLoading.classList.remove('is-hidden');
      const sosCustomerData = window.localStorage.getItem('sos_customer_data');
      const customer = JSON.parse(sosCustomerData);

      const id = customer.data.id
      const name = customer.data.fullname

      {% comment %} get todays date formatted as: "2023-03-30" {% endcomment %}
      const today = new Date();
      const dd = String(today.getDate()).padStart(2, '0');
      const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
      const yyyy = today.getFullYear();

      const inputs = [
        {
          name: 'Campaign Name',
          value: window.airtableCampaignName,
          type: 'singleLineText',
          required: true,
        },
        {
          name: "End Date",
          value: yyyy + '-' + mm + '-' + dd,
          type: "date",
          required: true
        },
        {
          name: "Number of selectable gifts",
          value: 1,
          type: "number",
          required: true
        },
        {
          name: "Form Button Text",
          value: "Send a gift",
          type: "singleLineText",
          required: true
        },
        {
          name: "Customer",
          value: id + '_' + name,
          required: true
        },
        {
          name: "Gift Message",
          value: '',
          type: "singleLineText",
          required: true
        },
        {
          name: "Shipping Details",
          value: null,
          type: "singleLineText",
          required: true
        },
        {
          name: "Company Logo",
          value: null,
          type: "multipleAttachments",
        },
      ]

      const formArray = [
        {
          label: "Recipient First Name",
          type: "text",
          options: "",
          required: true,
          airtable_type: "singleLineText"
        },
        {
          label: "Recipient Last Name",
          type: "text",
          options: "",
          required: true,
          airtable_type: "singleLineText"
        },
        {
          label: "To Email",
          type: "email",
          options: "",
          required: true,
          airtable_type: "singleLineText"
        },
        {
          label: "Recipient Phone",
          type: "phone",
          options: "",
          required: false,
          airtable_type: "singleLineText"
        },
        {
          label: "Address Line 1",
          type: "text",
          options: "",
          required: true,
          airtable_type: "singleLineText"
        },
        {
          label: "Address Line 2",
          type: "text",
          options: "",
          required: false,
          airtable_type: "singleLineText"
        },
        {
          label: "City",
          type: "text",
          options: "",
          required: true,
          airtable_type: "singleLineText"
        },
        {
          label: "Province Code",
          type: "text",
          options: "",
          required: true,
          airtable_type: "singleLineText"
        },
        {
          label: "Country Code",
          type: "text",
          options: "",
          required: true,
          airtable_type: "singleLineText"
        },
        {
          label: "Zip/Postal",
          type: "text",
          options: "",
          required: true,
          airtable_type: "singleLineText"
        },
        {
          label: "Gift Message",
          type: "text",
          options: "",
          required: false,
          airtable_type: "singleLineText"
        }
      ]

      const gifts = {
        main: window.campaignForm.state['Main Gift'],
        custom: window.campaignForm.state['Custom Swag'],
      }

      try {

        const pageData = await window.airtableCreateCampaign({
          inputs,
          formArray,
          gifts,
        })

      } catch (error) {
        alert("An error when submitting your gift. Please get in touch with technical support. (Code: 1)");
      }

      const handle = window.airtableCampaignName.replace(/\s+/g, '-').toLowerCase();

      try {
        const airtableRecord = await window.createAirtableEntries({
          campaignName: handle,
          customerId: id,
          giftState: window.campaignForm.state,
          formState: jsonData, // Replace "value" with "jsonData"
        });

        elements.submitMultipleAddressesLoading.classList.add("is-hidden");

        // Check the first element of the array instead of the whole object
        if (airtableRecord[0].message === "Success") {
          const event = new CustomEvent("airtable-address-added", {
            detail: { airtableRecord: airtableRecord[0] },
          });
          document.dispatchEvent(event);
        } else {
          console.error("Unexpected response:", airtableRecord);
          alert(
            "An error when submitting your gift. Please get in touch with technical support. (Code: 2)"
          );
        }
      } catch (error) {
        console.error("Error in createAirtableEntry:", error);
        alert(
          "An error when submitting your gift. Please get in touch with technical support. (Code: 3)"
        );
      }
    }

    elements.fileInputTrigger.addEventListener('click', handlers.onFileInputTriggerClick);
    elements.fileInput.addEventListener('change', handlers.onFileInputChange);
    elements.form.addEventListener('submit', handlers.onSubmitForm);
    elements.form.addEventListener('keydown', handlers.onFormKeyDown);
    elements.exportCsvButton.addEventListener('click', handlers.exportTableToCsv);
    elements.clearCsvButton.addEventListener('click', handlers.onClearCsvClick);
  };

  const initErrorPop = () => {
    const container = document.querySelector('#inventory-insufficient');

    const elements = {
      close: [...container.querySelectorAll('[data-js-element="close-popup"]')],
      newProductsButton: container.querySelector('[data-js-element="new-products"]'),
      newProductLink: document.querySelector('[data-js-element="new-products-link"]'),
      accountSupportLink: document.querySelector('.account-support .link'),
      accountSupportButton: container.querySelector('[data-js-element="contact"]'),
    };

    const eventHandler = {
      closePopup: () => {
        container.style.display = 'none';
      },
    };

    elements.accountSupportButton.addEventListener('click', () => {
      eventHandler.closePopup();
      elements.accountSupportLink.click();
    });

    elements.newProductsButton.addEventListener('click', () => {
      eventHandler.closePopup();
      elements.newProductLink.click();
    });

    elements.close.forEach((element) => {
      element.addEventListener('click', () => {
        eventHandler.closePopup();
      });
    });

    document.addEventListener('keyup', function (e) {
      if (e.keyCode === 27) {
        eventHandler.closePopup();
      }
    });
  };

  initErrorPop();
  initMultipleAddressForm();
</script>
