<form data-js-element="submit-multiple-address">
  <div id="csvForm" class="margin-bottom margin-medium"></div>
  <button data-js-element="export-csv" class="margin-bottom margin-medium button is-hidden">
    <span>Export CSV</span>
  </button>
</form>

<div
  data-js-element="file-upload_container"
  class="file-upload_container multiple display-flex justify-content-between padding-medium margin-bottom margin-small align-items-center is-disabled"
>
  <p>Upload your CSV file now</p>
  <button class="button secondary"><span>Upload</span></button>
</div>


<input
  style="display: none;"
  type="file"
  id="csvFile"
  class="file-upload_input"
  accept=".csv"
  data-js-element="file-upload_input"
>

<div id="inventory-insufficient" style="display: none">
  <div class="popup-overlay" data-js-element="close-popup"></div>
  <div class="popup-content">
    <h3 class="popup-title margin-bottom margin-small">Inventory Insufficient</h3>
    <p class="popup-body margin-bottom margin-small">You are trying to add too many products. Unfortunately, you do not have enough inventory available. Make sure to order new products, select a product with enough inventory or reduce the amount of rows in your uploaded CSV.</p>

    <div class="popup-ctas display-flex gap-1">
      <button data-js-element="contact" class="button">
        <span>Contact Account Manager</span>
      </button>
      <button data-js-element="new-products" class="button secondary">
        <span>Order New Product</span>
      </button>
    </div>
    
    <button class="popup-close-button" data-js-element="close-popup">
      <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect x="0.5" y="0.5" width="47" height="47" rx="23.5" fill="white"/>
        <path d="M30.8348 30.3634L30.3633 30.8348C30.103 31.0951 29.6809 31.0951 29.4205 30.8348L23.9994 25.4136L18.5782 30.8347C18.3179 31.0951 17.8958 31.0951 17.6354 30.8347L17.164 30.3633C16.9037 30.103 16.9037 29.6809 17.164 29.4205L22.5852 23.9994L17.164 18.5782C16.9037 18.3179 16.9037 17.8958 17.164 17.6354L17.6354 17.164C17.8958 16.9037 18.3179 16.9037 18.5782 17.164L23.9994 22.5852L29.4205 17.164C29.6809 16.9037 30.103 16.9037 30.3633 17.164L30.8348 17.6354C31.0951 17.8958 31.0951 18.3179 30.8348 18.5782L25.4136 23.9994L30.8348 29.4205C31.0951 29.6809 31.0951 30.103 30.8348 30.3634Z" fill="black"/>
        <rect x="0.5" y="0.5" width="47" height="47" rx="23.5" stroke="#E0E0E0"/>
      </svg>
    </button>
  </div>
</div>

<style>
  #csvForm {
    overflow: auto;
  }

  #csvForm table {
  }

  #csvForm table th {
    text-align: left;
  }

  .account #csvForm table td:first-of-type {
    padding: 0;
    padding-left: 1rem;
  }

  .account #csvForm table input {
  }

  input.has-error {
    border-color: red;
  }
</style>

<script type="module">
  const initMultipleAddressForm = () => {
    const elements = {
      fileInputTrigger: document.querySelector('[data-js-element="file-upload_container"]'),
      fileInput: document.querySelector('[data-js-element="file-upload_input"]'),
      form: document.querySelector('[data-js-element="submit-multiple-address"]'),
      insufficientInventoryModal: document.querySelector('#inventory-insufficient'),
      exportCsvButton: document.querySelector('[data-js-element="export-csv"]'),
    };

    const handlers = {
      onFormKeyDown: (event) => {
        if (event.key === 'Enter' || event.keyCode === 13) {
          event.preventDefault();
          elements.form.dispatchEvent(new Event('submit'));
        }
      },
      onSubmitForm: (event) => {
        event.preventDefault();
        
        const isFormValid = elements.form.reportValidity();
        const errorRows = {};
    
        if (!isFormValid) {
          const rows = elements.form.querySelectorAll('tr');
          rows.forEach((row, rowIndex) => {
            if (rowIndex > 0) { // Skip the header row
              const inputs = row.querySelectorAll('input');
              const errorInputs = [];
              inputs.forEach((input, inputIndex) => {
                if (!input.validity.valid) {
                  errorInputs.push({
                    inputIndex: inputIndex - 1, // -1 to account for the index count cell
                    errorMessage: input.validationMessage
                  });
                }
              });
              if (errorInputs.length > 0) {
                errorRows[rowIndex] = errorInputs;
              }
            }
          });
          console.log('Form not submitted due to validation errors:', errorRows);

          elements.insufficientInventoryModal.style.display = 'flex';
        } else {
          console.log('Form submitted');
          // Perform your form submission tasks here, e.g., send the data to a server
        }
      },
      onFileInputTriggerClick: (event) => {
        console.log(event);

        event.preventDefault();
        elements.fileInput.click();
      },
      onFileInputChange: (event) => {
        elements.exportCsvButton.classList.remove('is-hidden');

        const file = event.target.files[0];
      
        if (file.type === 'text/csv') {
          const reader = new FileReader();
      
          reader.onload = function (e) {
            const csv = e.target.result;
            const form = csvToTable(csv);
            const csvFormContainer = document.getElementById('csvForm');

            csvFormContainer.style.display = 'block';
      
            if (csvFormContainer.firstChild) {
              csvFormContainer.removeChild(csvFormContainer.firstChild);
            }
      
            csvFormContainer.appendChild(form);
          };
      
          reader.readAsText(file);
      
          const activeCampaignsContainer = document.querySelector('[data-js-element="active-campaigns"]');
          const state = window.campaignForm.state;
          const mainGifts = state['Main Gift'];
          const customGifts = state['Custom Swag'];
          const productInfoString = [mainGifts, customGifts].filter(Boolean).join(', ');
      
          const selectedProducts = productInfoString.match(/Product Id: (\d+)/g).map((match) => {
            const productId = match.split(':').pop().trim();
            return productId;
          });
      
          // Filter out items with matching data-product-id
          const productCards = activeCampaignsContainer.querySelectorAll('[data-js-element="cf-product-card"]');
          const filteredProductCards = Array.from(productCards).filter(card => {
            const productId = card.getAttribute('data-product-id');
            return selectedProducts.includes(productId);
          });
      
          // Sum up the total inventory for each item found
          let totalInventory = 0;
          filteredProductCards.forEach(card => {
            const inventoryElement = card.querySelector('[data-inventory]');
            const inventoryValue = +inventoryElement.dataset.inventory;
            totalInventory += inventoryValue;
          });

          const numberOfRows = document.getElementById('csvForm').querySelectorAll('tr').length - 1; // Subtract 1 to exclude the header row
          if (totalInventory > numberOfRows) {
            elements.insufficientInventoryModal.style.display = 'flex';
          }

          clearTableContent();
      
        } else {
          alert('Please upload a CSV file.');
        }
      },   
      exportTableToCsv: () => {
        const table = document.querySelector('#csvForm table');
        const rows = table.querySelectorAll('tr');
        const csv = [];
    
        rows.forEach((row) => {
          const rowData = [];
          const cells = row.querySelectorAll('th, td');
    
          cells.forEach((cell, cellIndex) => {
            // Ignore the first cell, which contains the row index
            if (cellIndex > 0) {
              if (cell.querySelector('input')) {
                rowData.push(cell.querySelector('input').value);
              } else {
                rowData.push(cell.textContent);
              }
            }
          });
    
          csv.push(rowData.join(','));
        });
    
        const csvContent = csv.join('\n');
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'exported-table.csv';
        link.style.display = 'none';
    
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      },
      
    };

    elements.fileInputTrigger.addEventListener('click', handlers.onFileInputTriggerClick);
    elements.fileInput.addEventListener('change', handlers.onFileInputChange);
    elements.form.addEventListener('submit', handlers.onSubmitForm);
    elements.form.addEventListener('keydown', handlers.onFormKeyDown);
    elements.exportCsvButton.addEventListener('click', handlers.exportTableToCsv);


    const clearTableContent = () => {

      {% comment %} get csvForm id {% endcomment %}
      const csvForm = document.getElementById('csvForm');

      {% comment %} remove the direct children of csvForm from the DOM {% endcomment %}

      {% comment %} wait 1000ms {% endcomment %}
      setTimeout(function() {
        csvForm.style.display = 'none';
      }, 1000);

      {% comment %} @TODO: Ensure you can clear and re-add csv as many time as necessary {% endcomment %}
    }
    

    const csvToTable = (csv) => {
      const createEditableCell = (value, isRequired) => {
        const cell = document.createElement('td');
        const input = document.createElement('input');
        input.type = 'text';
        input.value = value;
        input.classList.add('field_input');
        input.style.minWidth = '260px';
        if (isRequired) {
          input.required = true;
          if (value.trim() === '') {
            input.classList.add('has-error');
          }
          input.addEventListener('input', function () {
            if (this.value.trim() !== '') {
              this.classList.remove('has-error');
            } else {
              this.classList.add('has-error');
            }
          });
        }
        cell.appendChild(input);
        return cell;
      };

      const lines = csv.split('\n');
      const div = document.createElement('div');

      div.style.overflowX = 'auto';
      div.style.whiteSpace = 'nowrap';

      const table = document.createElement('table');
      div.appendChild(table);

      const header = document.createElement('tr');

      const columnTitles = [
        '',
        'Recipient First Name',
        'Recipient Last Name',
        'To Email',
        'Address Line 1',
        'Address Line 2',
        'City',
        'Province Code',
        'Country Code',
        'Zip/Postal',
        'Gift Message',
      ];

      columnTitles.forEach((title) => {
        const cell = document.createElement('th');
        cell.textContent = title;
        header.appendChild(cell);
      });
      
      table.appendChild(header);

      lines.forEach((line, index) => {
        const values = line.split(',');
        if (values.length >= 9) {
          const row = document.createElement('tr');
      
          // Add index count + 1 at the beginning of the row
          const rowIndexCell = document.createElement('td');
          rowIndexCell.textContent = index + 1;
          row.appendChild(rowIndexCell);
      
          row.appendChild(createEditableCell(values[0], true));
          row.appendChild(createEditableCell(values[1], true));
          row.appendChild(createEditableCell(values[2], true));
          row.appendChild(createEditableCell(values[3], true));
          row.appendChild(createEditableCell(values[4] || '', false));
          row.appendChild(createEditableCell(values[5], true));
          row.appendChild(createEditableCell(values[6], true));
          row.appendChild(createEditableCell(values[7], true));
          row.appendChild(createEditableCell(values[8], true));
          row.appendChild(createEditableCell(values[9] || '', false));
          table.appendChild(row);
        }
      });

      return div;
    };
  };

  const initErrorPop = () => {
    const container = document.querySelector('#inventory-insufficient');

    const elements = {
      close: [...container.querySelectorAll('[data-js-element="close-popup"]')],
      newProductsButton: container.querySelector('[data-js-element="new-products"]'),
      newProductLink: document.querySelector('[data-js-element="new-products-link"]'),
      accountSupportLink: document.querySelector('.account-support .link'),
      accountSupportButton: container.querySelector('[data-js-element="contact"]'),
    };

    const eventHandler = {
      closePopup: () => {
        container.style.display = 'none';
      },
    };

    elements.accountSupportButton.addEventListener('click', () => {
      eventHandler.closePopup();
      elements.accountSupportLink.click();
    });

    elements.newProductsButton.addEventListener('click', () => {
      eventHandler.closePopup();
      elements.newProductLink.click();
    });

    elements.close.forEach((element) => {
      element.addEventListener('click', () => {
        eventHandler.closePopup();
      });
    });

    document.addEventListener('keyup', function (e) {
      if (e.keyCode === 27) {
        eventHandler.closePopup();
      }
    });
  };

  initErrorPop();
  initMultipleAddressForm();
</script>

