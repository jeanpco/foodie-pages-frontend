{{ 'loading.css' | asset_url | stylesheet_tag }}

<div data-js-container="{{ campaign_container }}" class="corporate-products-container">
  {% comment %} Empty State {% endcomment %}
  <div data-js-element="products-empty-state" class="hide">
    <div class="divider background-color-azul-verdoso-100"></div>
    <h4
      data-js-element="campaign-title"
      class="corporate-campaigns-products__title text-color-azul-verdoso-100 padding-top padding-small"
    >
      No Campaign Found
    </h4>
    <div class="corporate-campaigns-products__main margin-top margin-large">
      <h5 data-js-element="main-gifts-title" class="heading-style-h3 margin-bottom margin-large">Main Gifts</h5>
      <div data-js-element="main-gifts-grid" class="products-grid main margin-top margin-small">
        <p class="heading-style-h4 text-color-grey-400">No Products Found</p>
      </div>
    </div>
    <div class="corporate-campaigns-products__custom margin-top margin-large">
      <h5 data-js-element="custom-gifts-title" class="heading-style-h3 margin-bottom margin-large">
        Custom Swag and Inserts
      </h5>
      <div data-js-element="custom-gifts-grid" class="products-grid custom margin-top margin-small">
        <p class="heading-style-h4 text-color-grey-400">No Products Found</p>
      </div>
    </div>
  </div>
  {% comment %} Campaigns {% endcomment %}
  <div data-js-element="active-campaigns" class="active-campaigns display-flex flex-direction-column gap-2">
    <div data-js-element="loading-products" class="pos-rel" style="min-height: 400px; width: 100%;">
      <div class="display-flex gap-1">
        <div class="modal-loading pos-dead-center">
          <div class="modal-loading-container text-align-center">
            <div class="loading-spinner"></div>
            <p class="text-size-tiny margin-top margin-small">Loading your products..</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .divider {
    height: 1px;
    width: 100%;
    display: block !important;
  }

  .products-grid {
    {% comment %} make grid of 3 column with 1 rem gap {% endcomment %}
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 1rem;
  }

  {% comment %} max-width: 767, grid of 2 {% endcomment %}
  @media screen and (max-width: 767px) {
    .products-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  {% comment %} max-width: 479, grid of 1 {% endcomment %}
  @media screen and (max-width: 479px) {
    .products-grid {
      grid-template-columns: repeat(1, 1fr);
    }
  }
</style>

<script type="module">
  window.customerCollections = [
    {% for collection in collections %}
      {% if collection.metafields.custom.customer_id != blank %}
        {
          "customer_id": {{ collection.metafields.custom.customer_id }},
          "collection_id": {{ collection.id }}
        },
      {% endif %}
    {% endfor %}
    {
      "customer_id": null,
      "collection_id": 287050530975
    }
  ];

  const emptyState = (container) => {
    const elements = {
      emptyState: container.querySelector('[data-js-element="products-empty-state"]'),
    };

    elements.emptyState.classList.remove('hide');
  };

  function mergeProducts(products) {
    const mergedProducts = {};
  
    products.forEach((product) => {
      if (!product) {
        return;
      }
      
      if (!mergedProducts[product.id]) {
        mergedProducts[product.id] = {
          ...product,
          variants: [{
            ...product.matchingVariant,
            sosInventory: product.sosInventory,
          }],
          sosInventory: product.sosInventory,
        };
      } else {
        mergedProducts[product.id].variants.push({
          ...product.matchingVariant,
          sosInventory: product.sosInventory,
        });
        
        mergedProducts[product.id].sosInventory += product.sosInventory;
      }
    });
  
    const result = Object.values(mergedProducts);
    return result;
  }

  window.productsGenerateCampaigns = ({ campaigns, products, container }) => {
    // Create a list of all SKUs from the customer's campaign items
    const customerCampaignSkus = campaigns
      .flatMap(campaign => campaign.items.data)
      .filter(item => item && item.sku)
      .map(item => item.sku.toLowerCase());
    
    // More strict filtering to only include exact SKU matches
    const customerProducts = [];
    
    // For each campaign item SKU, find the matching product
    customerCampaignSkus.forEach(campaignSku => {
      // Find products with matching SKUs
      const matchingProducts = products.filter(product => {
        if (!product.variants || product.variants.length === 0) return false;
        
        return product.variants.some(variant => {
          const match = variant.sku && variant.sku.toLowerCase() === campaignSku;
          return match;
        });
      });
      
      // Add matching products to the customer products array if not already included
      matchingProducts.forEach(product => {
        if (!customerProducts.some(p => p.id === product.id)) {
          customerProducts.push(product);
        }
      });
    });

    if (!campaigns || !campaigns.length) {
      container.innerHTML = `
        <div class="corporate-campaigns-products__empty-state">
          <h4 class="heading-style-h4">No campaigns found</h4>
          <p>You don't have any campaigns yet. Create a campaign to get started.</p>
        </div>
      `;
      return;
    }

    const elements = {
      activeCampaigns: container.querySelector('[data-js-element="active-campaigns"]'),  
    }

    campaigns.map(campaign => {
      const campaignDivContainer = document.createElement('div');
      const items = campaign.items.data;
      const itemsWithSku = items.filter(item => item.sku)

      // Convert itemsWithSku to a Promise-based map so we can use async/await
      let campaignItemsPromises = itemsWithSku.map(async (item) => {
        const line = campaign.lines.find((line) => line.item.id === item.id);
        
        // Find product by SKU match in the filtered customer products list
        let product = customerProducts.find((product) => {
          if (!product.variants) return false;
          return product.variants.some((v) => {
            const match = v.sku && item.sku && v.sku.toLowerCase() === item.sku.toLowerCase();
            return match;
          });
        });
        
        // If product not found in collections, try to fetch it directly by SKU
        if (!product && item.sku) {
          try {
            // Check if we have a cached version of this product
            const cachedProduct = window.sessionStorage.getItem(`product_${item.sku}`);
            if (cachedProduct) {
              product = JSON.parse(cachedProduct);
            } else {
              // Fetch the product directly by SKU
              product = await window.getProductBySku(item.sku);
              
              // Cache the product for future use
              if (product) {
                window.sessionStorage.setItem(`product_${item.sku}`, JSON.stringify(product));
              }
            }
          } catch (error) {
            console.error('Error fetching product by SKU:', error);
          }
        }
        
        // If still no product found, create a fallback
        if (!product) {
          // Create a fallback product using the item data
          product = {
            id: item.id,
            title: item.name || 'Product ' + item.sku,
            handle: 'product-' + item.sku.toLowerCase().replace(/[^a-z0-9]/g, '-'),
            tags: '',  // String instead of array
            variants: [{
              id: item.id + '000',
              title: 'Default',
              sku: item.sku,
              price: item.price || 0,
              available: true,
              inventory_quantity: line ? (line.quantity - line.shipped) : 0
            }],
            images: [],
            image: null,
            // Add all required properties for the product modal
            options: [{ name: 'Title', position: 1, values: ['Default'] }],
            body_html: '<p>No product description available.</p>',
            product_type: '',
            vendor: '',
            metafields: { metafields: [] }
          };
        }
      
        // Find the matching variant by SKU
        let matchingVariant = null;
        if (product && product.variants) {
          matchingVariant = product.variants.find((v) => {
            return v.sku && item.sku && v.sku.toLowerCase() === item.sku.toLowerCase();
          });
          
          if (!matchingVariant) {
            // If no exact match, use the first variant as fallback
            matchingVariant = product.variants[0];
          }
        }

        const sosInventory =
          line.quantity - line.shipped > 0 ? line.quantity - line.shipped : 0;
      
        return {
          ...product,
          matchingVariant,
          sosInventory,
        };
      });

      // Handle the product promises
      Promise.all(campaignItemsPromises).then(campaignItems => {
      
      // Merge products with the same product_id
      const mergedItems = mergeProducts(campaignItems);
      
      {% comment %} refactor "campaignItems" only to return item that have different id {% endcomment %}
      const uniqueItems = mergedItems.filter((item, index, array) => {
        return item && index === array.findIndex((p) => p && p.id === item.id);
      });
      
      // Filter out any undefined or null items first
      const validCampaignItems = uniqueItems.filter(p => p);
      
      const gifts = {
        main: validCampaignItems.filter(p => !p.tags || !p.tags.includes('custom')),
        custom: validCampaignItems.filter(p => p.tags && p.tags.includes('custom'))
      }
      
      const hasGifts = gifts.main.length > 0 || gifts.custom.length > 0;
      const hideButtons = container.dataset.jsContainer !== 'send-gifts'
      const html = hasGifts ? `
        <div data-js-element="" class="corporate-campaigns-products">
          <div class="divider background-color-azul-verdoso-100"></div>
          <h4 data-js-element="campaign-title" class="corporate-campaigns-products__title text-color-azul-verdoso-100 padding-top padding-small">
            ${campaign.name || 'This campaign is unnamed'}
          </h4>
          ${gifts.main.length > 0 ? `
            <div class="corporate-campaigns-products__main margin-top margin-large">
              <h5 data-js-element="main-gifts-title" class="heading-style-h3 margin-bottom margin-large">Main Gifts</h5>
              <div data-js-element="main-gifts-grid" class="products-grid main margin-top margin-small">
                ${gifts.main.map(product => {
                  // Create the item structure expected by cfProductCard
                  const item = {
                    product: product
                  };
                  
                  return window.cfProductCard(item)
                }).join('')}
              </div>
            </div>
          ` : ''}
          ${gifts.custom.length > 0 ? `
            <div class="corporate-campaigns-products__custom margin-top margin-large">
              <h5 data-js-element="custom-gifts-title" class="heading-style-h3 margin-bottom margin-large">Custom Swag and Inserts</h5>
              <div data-js-element="custom-gifts-grid" class="products-grid custom margin-top margin-small">
                ${gifts.custom.map(product => {
                  // Create the item structure expected by cfProductCard
                  const item = {
                    product: product
                  };
                  
                  return window.cfProductCard(item)
                }).join('')}
              </div>
            </div>
          ` : ''}
        </div>
      ` : '';

      campaignDivContainer.innerHTML = html;

      const productElements = [...campaignDivContainer.querySelectorAll(`.cf-product-card`)];

      productElements.forEach((productElement) => {
        const product = campaignItems.find(product => product.id === +productElement.dataset.productId)

        const event = new CustomEvent('product-card-added', { detail: { productElement, data: { product } } });
        document.dispatchEvent(event);
      })

      const loadingProducts = container.querySelector('[data-js-element="loading-products"]');
      loadingProducts.classList.add('is-hidden');

      return elements.activeCampaigns.appendChild(campaignDivContainer);
    });
    })
  }



















































</script>
