{{ 'cf-product-card-modal.css' | asset_url | stylesheet_tag }}

{% comment %} Modal {% endcomment %}

<div id="modal" class="modal pos-rel">
  <div class="modal-container">
    {% render 'campaign-form__icon-close' %}
    <!-- Modal Content -->
    <div data-js-element="product-modal-content" class="product-modal_content">
      <div class="modal-loading pos-dead-center">
        <div class="modal-loading-container text-align-center">
          <div class="loading-spinner"></div>
          <p class="text-size-tiny margin-top margin-small">Loading product details...</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script type="module">
  window.closeModal = modal => modal.style.display = 'none'
  window.openModal = modal => modal.style.display = 'block'
  
  window.cfProductModal = (props) => {
    const {data, isOpen, productElement} = props
    {% comment %} extract data {% endcomment %}
    const numberOfVariant = data.variants.length;
    const isCustomSwag = data.tags.includes('custom');

    {% comment %} get elements {% endcomment %}
    const elements = {
      modal: document.getElementById("modal"),
      close: document.querySelector('[data-js-element="cf-icon-close"]'),
      modalContent: document.querySelector('[data-js-element="product-modal-content"]'),
    }

    {% comment %} Handle modal open {% endcomment %}

    if (isOpen) window.openModal(elements.modal)

    {% comment %} Handle modal closure {% endcomment %}

    elements.close.addEventListener("click", () => window.closeModal(elements.modal));

    window.addEventListener("click", (event) => {
      if (event.target == elements.modal) window.closeModal(elements.modal)
    });

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") window.closeModal(elements.modal)
    });

    window.cfProductModal.build(data);
    window.cfProductModal.buildSwiper()
    window.cfProductModal.buildAccordion()
    window.cfProductModal.buildATC({ 
      tags: data.tags, 
      element: productElement, 
      id: data.id, 
      variants: data.variants, 
      title: data.title,
      numberOfVariant,
      isCustomSwag,
    })
  };

  window.cfProductModal.build = (props) => {
    {% comment %} get elements {% endcomment %}
    const elements = {
      modalContent: document.querySelector('[data-js-element="product-modal-content"]'),
    }

    if (!elements.modalContent) return console.error('No modal content found.')

    {% comment %} extract data {% endcomment %}

    const {
      body_html,
      handle,
      id,
      images,
      options,
      product_type,
      tags,
      title,
      variants,
      vendor,
      metafields: { metafields },
    } = props

    console.log(props)

    console.log(variants)
    console.log(options)

    const isDonation = tags.includes('donation');

    {% comment %} find metafields with key of "excerpt" and namespace of "custom" {% endcomment %}
    const excerpt = metafields.find(
      metafield => metafield.key === 'excerpt' && metafield.namespace === 'custom'
    )
  
    elements.modalContent.innerHTML = `
      <form data-js-element="modal-content-form" class="modal-content w-full display-flex gap-3 justify-content-between">
        <div data-js-element="modal-product-images swiper" class="modal-product_images">
          <div class="swiper-wrapper">
            ${images.map((image, index) => `
              <img class="swiper-slide" src="${image.src}" alt="${title}">
            `).join('')}
          </div>
          <div class="swiper-pagination"></div>
        </div>
        <div class="modal-product_details">
          {% comment %} Vendor {% endcomment %}
          <small class="text-size-tiny uppercase text-weight-semibold text-color-tertiary">${vendor}</small>

          {% comment %} Title {% endcomment %}
          <h2 style="opacity: 1;" class="heading-style-h3 margin-vertical margin-small">${title}</h2>

          {% comment %} Excerpt {% endcomment %}
          ${excerpt ? `<p class="product__excerpt text-size-light text-color-grey-700">${excerpt.value}</p>` : ''}

          {% comment %} If donation {% endcomment %}

          ${isDonation ? `
            <div class="field-group margin-top margin-medium">
              <label class="text-size-tiny uppercase" for="ContactForm-name">Write an organization</label>
            
              <input
                id="donation-write-organization"
                type="text"
                name="input-donation-write-organization"
                class="field_input"
                value=""
                aria-required="true"
                autocorrect="off"
                autocapitalize="off"
                placeholder="Organization Name"
                required
              >
            </div>

            <div class="field-group margin-top margin-medium">
              <label class="text-size-tiny uppercase" for="ContactForm-name">Organization Website</label>
            
              <input
                id="donation-organization-website"
                type="text"
                name="input-donation-organization-website"
                class="field_input"
                value=""
                aria-required="true"
                autocorrect="off"
                autocapitalize="off"
                placeholder="Organization Website"
                required
              >
            </div>`
          : ''}

          {% comment %} Variant Selector {% endcomment %}
          
          ${options.map((option, index) => `
            <div class="field-group margin-top margin-medium">
              <label class="text-size-tiny uppercase" for="ContactForm-name">${option.name}</label>
              <select
                id="product-select-${index}"
                name="product-select-${index}"
                class="field_input"
                aria-required="true"
                autocorrect="off"
                autocapitalize="off"
                required
              >
                ${option.values.map((value, index) => `
                  <option value="${value}">${value}</option>
                `).join('')}
              </select>
            </div>
          `).join('')}

          {% comment %} Add to cart {% endcomment %}
          <button type="submit" class="button secondary modal-content_atc margin-vertical margin-medium">
            <span>Select this gift</span>
          </button>

          {% comment %} Description {% endcomment %}
          <div class="modal-accordion">
            <p data-js-element="modal-accordion-header" role="button" class="modal-accordion__header display-flex align-items-center justify-content-between">
              <span class="text-size-regular text-weight-semibold">
                Product Details
              </span>
              {% render 'campaign-form_icon-arrow-down' %}
            </p>
            <div data-js-element="modal-accordion-body" class="modal-accordion__body text-rich-text">
              <div class="padding-top padding-small">
                ${body_html}
              </div>
            </div>
          </div>
        </div>
      </form>
    `;
  }

  window.cfProductModal.buildSwiper = () => {
    const elements = {
      modalProductImages: document.querySelector('[data-js-element="modal-product-images swiper"]'),
    }

    if (!elements.modalProductImages) return console.error('No modal product images found.')

    const swiper = new Swiper(elements.modalProductImages, {
      slidesPerView: 1,
      spaceBetween: 10,
      pagination: {
        el: '.swiper-pagination',
        type: 'bullets',
        clickable: true,
      },
    });
  }

  window.cfProductModal.buildAccordion = () => {
    const elements = {
      modalAccordionHeader: document.querySelector('[data-js-element="modal-accordion-header"]'),
      modalAccordionBody: document.querySelector('[data-js-element="modal-accordion-body"]'),
    }

    if (!elements.modalAccordionHeader) return console.error('No modal accordion header found.')
    if (!elements.modalAccordionBody) return console.error('No modal accordion body found.')

    elements.modalAccordionHeader.addEventListener('click', () => {
      elements.modalAccordionBody.classList.toggle('is-active')
      elements.modalAccordionHeader.classList.toggle('is-active')
    })
  }

  window.cfProductModal.buildATC = (props) => {
    const {id, variants, title, element, numberOfVariant, isCustomSwag, tags} = props
    const isDonation = tags.includes('donation')

    const elements = {
      form: document.querySelector('[data-js-element="modal-content-form"]'),
      modal: document.getElementById("modal"),
    }

    const disableSubmitButton = () => {
      elements.form.querySelector('button').setAttribute('disabled', true)
      elements.form.querySelector('button span').innerHTML = 'This gift selected'
    }

    if (!elements.form) return console.error('No form found.')
    if (element.classList.contains('is-selected')) disableSubmitButton()

    elements.form.addEventListener('submit', (e) => {
      e.preventDefault()

      let selectedProduct = `Product Title: ${title} | Variant Title: ${variants[0].title} | Variant Sku: ${variants[0].sku} | Variant Id: ${variants[0].id}`;

      if (isDonation) {
        const organizationName = document.getElementById('donation-write-organization').value
        const organizationWebsite = document.getElementById('donation-organization-website').value

        selectedProduct = `Product Title: ${title} | Variant Title: ${variants[0].title} | Variant Sku: ${variants[0].sku} | Variant Id: ${variants[0].id} | Organization Name: ${organizationName} | Organization Website: ${organizationWebsite}`
      }

      if (numberOfVariant > 1) {
        console.log('MORE VARIANTS', props)
      } else {
       
        if (isCustomSwag) {
          window.cfProductCardAdd(selectedProduct, 'Custom Swag', element)
        } else {
          window.cfProductCardAdd(selectedProduct, 'Main Gift', element)
        }

      }

      disableSubmitButton()
      window.closeModal(elements.modal)
    })
  }






</script>
