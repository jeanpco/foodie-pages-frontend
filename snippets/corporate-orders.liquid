{{ 'corporate-orders.css' | asset_url | stylesheet_tag }}
{{ 'loading.css' | asset_url | stylesheet_tag }}

<div class="loading">
  <div class="loading-container text-align-center">
    <div class="loading-spinner"></div>
    <p class="text-size-tiny margin-top margin-small">
      Retrieving Sale Orders {{ customer.name }}.<br>
      Thank you for your patience.
    </p>
  </div>
</div>

<table id="sos-inventory-table"></table>

<script type="module">
  

const loadingElement = (style) => `
  <div style="${style}" class="loading inline-loading">
    <div class="loading-container">
      <div class="loading-spinner"></div>
    </div>
  </div>
`

  const backendURL = 'https://foodiepages.herokuapp.com/'
  {% comment %} const backendURL = 'https://foodiepagesbackend.onrender.com' {% endcomment %}

  {% comment %} 
    UTILS
  {% endcomment %}

  const UPSTrackingStatuses = {
    'I': 'On The Way',
    'D': 'Delivered',
    'X': 'Exception',
    'P': 'Pickup',
    'M': 'Awaiting Shipment',
    'O': 'Out for Delivery',
    'DO': 'Delivered Origin',
    'DD': 'Delivered Destination',
    'RS': 'Returned to Shipper',
    'MV': 'Billing Information Voided',
    'NA': 'Awaiting Shipment',
    'W': 'Warehousing',
  }

  {% comment %} 
    UTILS
  {% endcomment %}

  const getTrackingUrl = (trackingNumber, carrier) => {

    const trackingUrls = {
      'ups': `https://wwwapps.ups.com/WebTracking/track?track=yes&trackNums=${trackingNumber}`,
      'fedex': `https://www.fedex.com/apps/fedextrack/?action=track&trackingnumber=${trackingNumber}`,
      'usps': `https://tools.usps.com/go/TrackConfirmAction_input?qtc_tLabels1=${trackingNumber}`,
      'dhl': `https://www.dhl.com/en/express/tracking.html?AWB=${trackingNumber}&brand=DHL`,
      'canada-post': `https://www.canadapost.ca/cpotools/apps/track/personal/findByTrackNumber?trackingNumber=${trackingNumber}`,
      'purolator': `https://www.purolator.com/en/track-your-shipping/items.aspx?pin=${trackingNumber}`,
      'ontrac': `https://www.ontrac.com/trackingres.asp?tracking_number=${trackingNumber}`,
      'lasership': `https://www.lasership.com/track?tracking_number=${trackingNumber}`
    }

    return trackingUrls[carrier]

  }

  {% comment %} 
    BACKEND

    Returns Shipments - UPS 
  {% endcomment %}

  const getUPSTrackingStatus = (trackingNumber) => {
    if (!trackingNumber) return;
    
    try {
      return fetch(`${backendURL}/api/ups?trackingNumber=${trackingNumber}`)
        .then(response => response.json())
    } catch (error) {
      console.error(error)
    }
  }


  {% comment %} 
    BACKEND

    Returns Shipments - Shipstation 
  {% endcomment %}

  const getShipStationShipments = (storeId) => {
    if (!storeId) return;
    return fetch(`${backendURL}/api/get-shipstation-shipments?storeId=${storeId}`)
      .then(response => response.json())
  }

  {% comment %} 
    BACKEND

    Returns Stores - Shipstation 
  {% endcomment %}

  const getShipStationStores = () => {
    return fetch(`${backendURL}/api/get-shipstation-stores`)
      .then(response => response.json())
  }

  {% comment %} 
    BACKEND

    Returns Orders - Shipstation 
  {% endcomment %}

  const ShipStationOrders = (storeId) => {
    if (!storeId) return;

    return fetch(`${backendURL}/api/get-shipstation-orders?storeId=${storeId}`)
      .then(response => response.json())
  }

  {% comment %}
    BACKEND
    
    Returns SO - SOS
  {% endcomment %}

  const getSOSSaleOrdersFromCustomerId = () => {

    try {
      getShipStationStores().then(payload => {
        window.shipStationStores = payload;

        if (localStorage.getItem('saleOrders')) {
          buildTableFromSaleOrders(JSON.parse(localStorage.getItem('saleOrders')))
        }
    
        try {
          fetch(`${backendURL}/api/get-sale-orders`)
            .then(response => response.json())
            .then(data => {
              const saleOrders = data.data.filter(saleOrder => {
                return +saleOrder.customer.id === +{{ id }}
              })
    
              window.localStorage.setItem('saleOrders', JSON.stringify(saleOrders))
    
              buildTableFromSaleOrders(saleOrders);
            })
        } catch (error) {
          console.error(error)
        }
      }).catch(error => {
        console.error(error)
      })  
    } catch (error) {
      console.error(error)
    }
  }

  {% comment %}
    FRONTEND
  
    Generates the table when clicking "View Order" link
  {% endcomment %}

  const viewOrder = async (order) => {
    let storeId = null;

    if (!window.shipStationStores && !window.shipStationStores.length) return;

    const orders = window.shipStationStores.filter(store => {   
      const soNumber = order.number.match(/\d+/g).join('')

      if (store.storeName && store.storeName.toLowerCase().includes(order.number.toLowerCase()) || store.storeName.toLowerCase().includes(soNumber) && store.storeName.toLowerCase().includes('so')) {
        storeId = store.storeId;
      }
      return store.storeName && store.storeName.toLowerCase().includes(order.number.toLowerCase())
    })

    const modalHeader = document.querySelector('.js-element-order');
    const modalTitle = modalHeader.querySelector('.module-header_title');
    const modalBody = modalHeader.querySelector('p');
    const table = document.querySelector('#single-order-table');
    const loading = document.querySelector('.view-order_container .loading');
    const tableHeader = document.createElement('tr');

    loading.style.display = 'block';

    tableHeader.style.position = 'sticky';
    tableHeader.style.top = '-17px';
    tableHeader.style.backgroundColor = 'var(--color-white)';
    {% comment %} add box-shadow at the bottom of 1px for tableHeader {% endcomment %}
    tableHeader.style.boxShadow = '0px 1px 0px 0px var(--color-grey-200)';
    tableHeader.style.zIndex = '1';
    tableHeader.classList.add('hide-tablet')
    
    table.innerHTML = ''
    tableHeader.innerHTML = `
      <th class="text-size-tiny uppercase text-color-grey-600">Name</th>
      <th class="text-size-tiny uppercase text-color-grey-600">Address</th>
      <th class="text-size-tiny uppercase text-color-grey-600">Shipping status</th>
      <th class="text-size-tiny uppercase text-color-grey-600">Tracking Number</th>
      <th class="text-size-tiny uppercase text-color-grey-600">Shipment Date</th>
    `

    modalTitle.innerHTML = `Viewing Order: ${order.number}`
    modalBody.innerHTML = `Order created on: ${order.formattedDate}`
    {% comment %} find %%order_name%% in loading text and replace with order.number {% endcomment %}
    loading.querySelector('p').innerHTML = `Retrieving line items for ${order.number}.<br>Shipment size will impact load time.<br>Avg: 2-6 seconds.<br>Thank you for your patience.`

    {% comment %} get closest dialog element to modalHeader {% endcomment %}
    const dialog = modalHeader.closest('dialog');

    {% comment %} add a back to top p element as the last element of the view-order element scrolls back up when clicked {% endcomment %}
    const backToTop = document.createElement('p');
    const backToTopSpan = document.createElement('span');

    {% comment %} if backToTop is already present, dont add {% endcomment %}
    if (!document.querySelector('p.back-to-top')) {
      backToTop.appendChild(backToTopSpan)
      backToTopSpan.innerHTML = 'Back to top';
      backToTop.classList.add('back-to-top');
      backToTop.classList.add('button')
      backToTop.style.maxWidth = '200px';
      backToTop.addEventListener('click', () => {
        dialog.scrollTop = 0;
      })
      dialog.querySelector('.view-order').appendChild(backToTop) 
    }

    if (!storeId) {
      loading.style.display = 'none'
      table.innerHTML = `
        <div class="text-align-center padding-medium display-flex justify-content-center flex-direction-column gap-1 align-items-center">
          {% render 'icon-error' %}
          <p class="text-size-small">No shipments found for this order. It may be that your order has not yet been created within our fulfillment system, or that this shipment has been closed.</p>
        </div>
      `
      return;
    }

    try {

      const shipments = await getShipStationShipments(storeId)
      const orders = await ShipStationOrders(storeId)

      if (!orders && !orders.length) {
        modalBody.innerHTML = `No orders found for ${order.number}`
        return;
      }
      
      table.appendChild(tableHeader)

      {% comment %} sort orders by most recent using order.shipDate {% endcomment %}
      orders.sort((a, b) => {
        return new Date(b.shipDate) - new Date(a.shipDate);
      }).forEach((order, index) => {
        const addressValidationFailed = order.shipTo.addressVerified === "Address validation failed";
        const items = order.items;
        const address = order.shipTo;
        const shipDate = new Date(order.shipDate);
        const formattedShipDate = `${shipDate.toLocaleString('default', { month: 'short' })} ${shipDate.getDate()}, ${shipDate.getFullYear()}`

        const orderShipments = shipments.filter(shipment => shipment.orderId === order.orderId);

        const tableRow = document.createElement('tr');

        if (!!addressValidationFailed) {
          tableRow.classList.add('address-validation-failed')
        }

        tableRow.innerHTML = `
          <td class="text-size-small">
            <p class="text-size-tiny uppercase text-color-grey-600 hide-tablet-and-up">Address</p>
            <span>${address.name ? address.name : ''}</span>
          </td>
          <td>
            <p class="text-size-tiny uppercase text-color-grey-600 hide-tablet-and-up">Name</p>
            <div class="text-size-small address-line">
              ${address.street1 ? address.street1 + '<br>' : ''}
              ${address.street2 ? address.street2 + '<br>' : ''}
              ${address.street3 ? address.street3 + '<br>' : ''}
              ${address.city ? address.city + ',' : ''} ${address.postalCode ? address.postalCode + ',' : ''} ${address.state ? address.state + ',' : ''} ${address.country ? address.country + '<br>' : ''}
            </div>
          </td>
          <td class="text-size-small">
            <p class="text-size-tiny uppercase text-color-grey-600 hide-tablet-and-up">Shipping status</p>
            <span class="address-line" style="position: relative; width: 100%; display: block;" data-tracking-detail>
              ${loadingElement("margin-left: -15px;")}
            </span>
          </td>
          <td class="text-size-small">
            <p class="text-size-tiny uppercase text-color-grey-600 hide-tablet-and-up">Tracking Number</p>
            <span>
              ${
                orderShipments.map(shipment => {  
                  const trackingUrl = getTrackingUrl(shipment.trackingNumber, shipment.carrierCode)
                  return `<a class="link" target="_blank" data-tracking-number="${shipment.trackingNumber}" href="${trackingUrl ? trackingUrl : '#'}">${shipment.trackingNumber}</a>`
                }).join('<br>')
              }
            </span>
          </td>
          <td class="text-size-small">
            <p class="text-size-tiny uppercase text-color-grey-600 hide-tablet-and-up">Shipment Date</p>
            <span class="ship-date">${order.shipDate ? formattedShipDate : 'No Ship Date'}</span>
          </td>
        `

        table.appendChild(tableRow)
      })

      loading.style.display = 'none'

      if (!shipments.length) return

      getUPSTrackingDetails(shipments)

    } catch (error) {
      console.error(error)
    }
  }

  {% comment %} 
    BACKEND

    Get UPS tracking details from API
  {% endcomment %}

  const getUPSTrackingDetails = async (shipments) => {
    shipments.sort((a, b) => new Date(b.shipDate) - new Date(a.shipDate)).forEach(async ship => {

      if (!ship.trackingNumber) return;

      let statusType = null;
      let statusDescription = null;

      {% comment %} if the shipment has been saved, get the data from it otherwise call it from the ups api {% endcomment %}
      if (sessionStorage.getItem(ship.trackingNumber)) {
        const upsShipment = JSON.parse(sessionStorage.getItem(ship.trackingNumber));

        statusType = upsShipment.statusType;
        statusDescription = upsShipment.statusDescription;
      } else {

        try {
          const upsShipment = await getUPSTrackingStatus(ship.trackingNumber);

          if (upsShipment.trackResponse.shipment[0].warnings && upsShipment.trackResponse.shipment[0].warnings[0].message) {
            statusType = upsShipment.trackResponse.shipment[0].warnings[0].message;
            statusDescription = upsShipment.trackResponse.shipment[0].warnings[0].message
          } else {
            statusType = upsShipment.trackResponse.shipment[0].package[0].activity[0].status.type;
            statusDescription = upsShipment.trackResponse.shipment[0].package[0].activity[0].status.description;
          }
  
          {% comment %} save the data for next time around {% endcomment %}
          sessionStorage.setItem(ship.trackingNumber, JSON.stringify({
            statusType,
            statusDescription
          })) 

        } catch (error) {
          console.error(error)
        }
      }

      updateTrackingDetails(ship.trackingNumber, statusType, statusDescription)
    })

    {% comment %} if no tracking is found, hide loading {% endcomment %}
    const trackingShipDates = [...document.querySelectorAll('.ship-date')];

    trackingShipDates.forEach(track => {
      if (!track) return
      const row = track.closest('tr')
      const loading = row.querySelector('.inline-loading')

      {% comment %} if track text says "No Ship Date" {% endcomment %}
      if (track.innerText === 'No Ship Date' && loading) {
        loading.style.display = 'none'
      }
    })
  }

  {% comment %} 
    FRONTEND

    Update tracking details from UPS data
  {% endcomment %}

  const updateTrackingDetails = (trackingNumber, statusType, statusDescription) => {

    const trackingNumberElement = document.querySelector(`[data-tracking-number="${trackingNumber}"]`);
    const trackingLoading = trackingNumberElement && trackingNumberElement.closest('tr').querySelector('.inline-loading');
    
    if (trackingLoading) {
      trackingLoading.style.display = 'none';
    }

    if (!trackingNumberElement || !statusType || !statusDescription) {
      return;
    }



    const trackingDetail = trackingNumberElement.closest('tr').querySelector('[data-tracking-detail]');

    if (!trackingDetail) {
      return;
    }

    let status = statusType;

    if (UPSTrackingStatuses[statusType]) {
      status = UPSTrackingStatuses[statusType]
    }

    trackingDetail.innerHTML = status;
  }

  {% comment %} 
    FRONTEND

    Build initial table from the Sale Orders of SOS
  {% endcomment %}

  const buildTableFromSaleOrders = (saleOrders) => {

    const table = document.getElementById('sos-inventory-table')
    const loading = document.querySelector('.loading')

    loading.style.display = 'none'
    table.innerHTML = ''

    if (saleOrders && saleOrders.length) {
      const tableHeader = document.createElement('tr')
      
      table.appendChild(tableHeader)
      
      tableHeader.innerHTML = `
        <th class="text-size-tiny uppercase text-color-grey-600">Campaign Name</th>
        <th class="text-size-tiny uppercase text-color-grey-600">Order #</th>
        <th class="text-size-tiny uppercase text-color-grey-600">Order Date</th>
        <th class="text-size-tiny uppercase text-color-grey-600"># of boxes left</th>
        <th class="text-size-tiny uppercase text-color-grey-600">Delivery Status</th>
        <th class="text-size-tiny uppercase text-color-grey-600">Details</th>
      `

      saleOrders.forEach(saleOrder => {

        {% comment %} reduce the quantity from saleOrder.lines {% endcomment %}
        const totalQuantity = saleOrder.lines.reduce((acc, line) => {
          return acc + line.quantity
        }, 0)

        let deliveryStatus = 'Not Delivered'

        {% comment %} If any shipment linked shipments, shipment is partially completed {% endcomment %}
        if (saleOrder && saleOrder.linkedShipments && saleOrder.linkedShipments.length > 0) {
          deliveryStatus = 'Partially Shipped'
        }

        {% comment %} Get total of shipped items {% endcomment %}
        const totalShipped = saleOrder.lines.reduce((acc, line) => {
          return acc + line.shipped
        }, 0)

        if (totalShipped === totalQuantity) {
          deliveryStatus = 'Shipped'
        }

        {% comment %} Format date {% endcomment %}
        const date = new Date(saleOrder.date)
        const formattedDate = date.toLocaleDateString('en-CA', { month: 'long', day: 'numeric', year: 'numeric' })   

        const tableRow = document.createElement('tr')

        tableRow.innerHTML = `
          <td class="text-size-small">
            <p class="text-size-tiny uppercase text-color-grey-600 hide-mobile-landscape-and-up">Campaign Name</p>
            <span>Unnamed</span>
          </td>
          <td class="text-size-small">
            <p class="text-size-tiny uppercase text-color-grey-600 hide-mobile-landscape-and-up">Order #</p>
            <span>${saleOrder.number}</span>
          </td>
          <td class="text-size-small">
            <p class="text-size-tiny uppercase text-color-grey-600 hide-mobile-landscape-and-up">Order Date</p>
            <span>${formattedDate}</span>
          </td>
          <td class="text-size-small">
            <p class="text-size-tiny uppercase text-color-grey-600 hide-mobile-landscape-and-up"># of boxes left</p>
            <span>${totalQuantity - totalShipped}</span>
          </td>
          <td class="text-size-small">
            <p class="text-size-tiny uppercase text-color-grey-600 hide-mobile-landscape-and-up">Delivery Status</p>
            <span>${deliveryStatus}</span>
          </td>
          <td>
            <p class="text-size-tiny uppercase text-color-grey-600 hide-mobile-landscape-and-up">Details</p>
            <a class="link text-size-small" href="#view-order" data-order-number=${saleOrder.number}>View Order</a>
          </td>
        `

        table.appendChild(tableRow)
        const link = table.querySelector(`[data-order-number='${saleOrder.number}']`)
        link.addEventListener('click', () => viewOrder({...saleOrder, formattedDate}))
      })

      {% comment %} Reattach view order modal {% endcomment %}
      if (window.customFunctions.viewOrder) {
        window.customFunctions.viewOrder()
      }

    } else {
      const tableRow = document.createElement('tr')
      tableRow.innerHTML = `
        <td colspan="5">No orders found</td>
      `

      table.appendChild(tableRow)
    }
  }

  getSOSSaleOrdersFromCustomerId()

</script>
